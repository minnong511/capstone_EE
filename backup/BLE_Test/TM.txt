좋아요. 그럼 **청크 전송**과 **META 전송**이 어떻게 동작하는지,
그리고 지금 네 프로젝트에서 이게 어떻게 쓰이고, 어떤 문제가 생기는지 **간단한 흐름 그림**과 함께 정리해 드릴게요.

---

## 1. 기본 개념

### META 전송

* **정의**: 이번에 보낼 파일에 대한 설명서
* **내용**: JSON 문자열 `{sensor, mime, size, id}`
* **역할**:

  1. 수신측(PC)이 “어떤 파일인지, 크기가 얼마인지” 미리 알 수 있게 함
  2. 버퍼를 초기화하고 준비하는 신호
* **전송 방법**: BLE Characteristic(META UUID)에 데이터를 쓰고 `notify()` 호출 → PC에 전달

---

### 청크 전송

* **정의**: 파일 데이터를 잘라서 보낸 조각
* **구조**: `[seq_lo][seq_hi][flags][payload...]`

  * seq: 청크 번호 (0, 1, 2, …)
  * flags: 마지막 조각이면 `EOF` 플래그 1
  * payload: WAV 데이터 일부
* **전송 방법**: BLE Characteristic(DATA UUID)에 데이터를 쓰고 `notify()` 호출 → PC에 전달
* **이유**: BLE는 한 번에 보낼 수 있는 데이터 크기(MTU)가 제한됨 (247바이트 이하), 그래서 큰 파일은 쪼개서 보내야 함

---

## 2. 네 프로젝트에서의 동작 흐름

```
ESP32 ----------------------------> PC
         (1) META 전송
             {"sensor":"Sensor-01",
              "mime":"audio/wav",
              "size":16044,
              "id":1}
         -------------------------->
         (2) 청크 전송 시작
             seq=0, payload=...
         -------------------------->
             seq=1, payload=...
         -------------------------->
             ...
         -------------------------->
             seq=N, flags=EOF
         -------------------------->
```

1. ESP32가 WAV 파일(1초짜리) 생성
2. **META 전송**: 파일 정보 보내기
3. PC가 META 수신 → 버퍼 초기화, expected size 기록
4. ESP32가 파일을 **청크**로 잘라서 순서대로 전송
5. 마지막 청크에 EOF 플래그를 세움 → PC가 저장하고 종료

---

## 3. 지금 프로젝트에서 발생하는 문제

### (1) META 중복 수신

* BLE notify는 연결 직후 **캐시된 값**을 재전송하거나, 코드에서 META를 여러 번 보낼 수 있음
* 결과: PC가 버퍼를 초기화해버려서 **이미 받은 데이터 일부가 날아감**
* 부작용: size mismatch, unexpected seq 발생

---

### (2) 청크 유실

* ESP32가 청크를 너무 빠르게 보내면(2ms 간격, 큰 크기)
  PC BLE 스택이 다 못 받아서 **중간 청크가 버려짐**
* 결과: size mismatch (expected 크기와 실제 받은 크기가 다름)

---

### (3) 첫 청크 누락

* META 전송 직후 첫 청크를 바로 보내면,
  PC가 META 처리 중이라 첫 청크를 못 받는 경우 있음
* 결과: unexpected seq (첫 seq=0이 아니라 1부터 시작)

---

## 4. 문제 요약

| 문제      | 원인                  | 결과                 |
| ------- | ------------------- | ------------------ |
| META 중복 | 캐시 재전송, 코드 중복 전송    | 버퍼 초기화 → 데이터 일부 손실 |
| 청크 유실   | 전송 속도 과도, MTU 크기 한계 | size mismatch      |
| 첫 청크 누락 | META 직후 즉시 전송       | unexpected seq 경고  |

---

네 프로젝트에서 지금 WARN 로그들이 뜨는 건,
**이 BLE 전송 구조가 “빠르고 반복적으로” 동작하는데**
BLE Notify는 보장 전송이 아니라서 → **중복/누락/순서 꼬임**이 발생하기 때문입니다.

---

원하면 제가 이 전송 구조를 **META 1회 전송 + 청크 속도 제한 + 첫 청크 지연**까지 반영한 버전으로 다시 만들어서,
WARN이 거의 안 뜨도록 해줄 수 있습니다.
그렇게 하면 META/청크 원리는 그대로 두고, 안정성만 높이는 거죠.
